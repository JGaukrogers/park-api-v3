"""init

Revision ID: 687daced5384
Revises:
Create Date: 2023-10-25 12:33:52.521624

"""

import sqlalchemy as sa
import sqlalchemy_utc
from alembic import op

from webapp.common.sqlalchemy.point import Point

# revision identifiers, used by Alembic.
revision = '687daced5384'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'source',
        sa.Column('id', sa.BigInteger(), nullable=False),
        sa.Column('created_at', sqlalchemy_utc.sqltypes.UtcDateTime(timezone=True), nullable=False),
        sa.Column('modified_at', sqlalchemy_utc.sqltypes.UtcDateTime(timezone=True), nullable=False),
        sa.Column('uid', sa.String(length=256), nullable=False),
        sa.Column('name', sa.String(length=256), nullable=True),
        sa.Column('public_url', sa.String(length=4096), nullable=True),
        sa.Column('static_data_updated_at', sqlalchemy_utc.sqltypes.UtcDateTime(timezone=True), nullable=True),
        sa.Column('realtime_data_updated_at', sqlalchemy_utc.sqltypes.UtcDateTime(timezone=True), nullable=True),
        sa.Column('attribution_license', sa.Text(), nullable=True),
        sa.Column('attribution_contributor', sa.String(length=256), nullable=True),
        sa.Column('attribution_url', sa.String(length=256), nullable=True),
        sa.Column('status', sa.Enum('DISABLED', 'ACTIVE', 'FAILED', 'PROVISIONED', name='sourcestatus'), nullable=False),
        sa.Column('static_parking_site_error_count', sa.Integer(), nullable=False),
        sa.Column('realtime_parking_site_error_count', sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_source')),
        mysql_charset='utf8mb4',
        mysql_collate='utf8mb4_unicode_ci',
    )
    with op.batch_alter_table('source', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_source_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_source_modified_at'), ['modified_at'], unique=False)

    op.create_table(
        'parking_site',
        sa.Column('id', sa.BigInteger(), nullable=False),
        sa.Column('created_at', sqlalchemy_utc.sqltypes.UtcDateTime(timezone=True), nullable=False),
        sa.Column('modified_at', sqlalchemy_utc.sqltypes.UtcDateTime(timezone=True), nullable=False),
        sa.Column('source_id', sa.BigInteger(), nullable=False),
        sa.Column('original_uid', sa.String(length=256), nullable=False),
        sa.Column('name', sa.String(length=256), nullable=False),
        sa.Column('operator_name', sa.String(length=256), nullable=True),
        sa.Column('public_url', sa.String(length=4096), nullable=True),
        sa.Column('address', sa.String(length=512), nullable=True),
        sa.Column('description', sa.String(length=4096), nullable=True),
        sa.Column(
            'type',
            sa.Enum('ON_STREET', 'OFF_STREET_PARKING_GROUND', 'UNDERGROUND', 'CAR_PARK', 'OTHER', name='parkingsitetype'),
            nullable=True,
        ),
        sa.Column('max_stay', sa.Integer(), nullable=True),
        sa.Column('has_lighting', sa.Boolean(), nullable=True),
        sa.Column('fee_description', sa.String(length=256), nullable=True),
        sa.Column('has_fee', sa.Boolean(), nullable=True),
        sa.Column('park_and_ride_type', sa.String(length=256), nullable=True),
        sa.Column('is_supervised', sa.Boolean(), nullable=True),
        sa.Column('has_realtime_data', sa.Boolean(), nullable=False),
        sa.Column('static_data_updated_at', sqlalchemy_utc.sqltypes.UtcDateTime(timezone=True), nullable=True),
        sa.Column('realtime_data_updated_at', sqlalchemy_utc.sqltypes.UtcDateTime(timezone=True), nullable=True),
        sa.Column('realtime_opening_status', sa.Enum('OPEN', 'CLOSED', 'UNKNOWN', name='openingstatus'), nullable=False),
        sa.Column('lat', sa.Numeric(precision=10, scale=7), nullable=False),
        sa.Column('lon', sa.Numeric(precision=10, scale=7), nullable=False),
        sa.Column('capacity', sa.Integer(), nullable=True),
        sa.Column('capacity_disabled', sa.Integer(), nullable=True),
        sa.Column('capacity_woman', sa.Integer(), nullable=True),
        sa.Column('capacity_family', sa.Integer(), nullable=True),
        sa.Column('capacity_charging', sa.Integer(), nullable=True),
        sa.Column('capacity_carsharing', sa.Integer(), nullable=True),
        sa.Column('capacity_truck', sa.Integer(), nullable=True),
        sa.Column('capacity_bus', sa.Integer(), nullable=True),
        sa.Column('realtime_capacity', sa.Integer(), nullable=True),
        sa.Column('realtime_capacity_disabled', sa.Integer(), nullable=True),
        sa.Column('realtime_capacity_woman', sa.Integer(), nullable=True),
        sa.Column('realtime_capacity_family', sa.Integer(), nullable=True),
        sa.Column('realtime_capacity_charging', sa.Integer(), nullable=True),
        sa.Column('realtime_capacity_carsharing', sa.Integer(), nullable=True),
        sa.Column('realtime_capacity_truck', sa.Integer(), nullable=True),
        sa.Column('realtime_capacity_bus', sa.Integer(), nullable=True),
        sa.Column('realtime_free_capacity', sa.Integer(), nullable=True),
        sa.Column('realtime_free_capacity_disabled', sa.Integer(), nullable=True),
        sa.Column('realtime_free_capacity_woman', sa.Integer(), nullable=True),
        sa.Column('realtime_free_capacity_family', sa.Integer(), nullable=True),
        sa.Column('realtime_free_capacity_charging', sa.Integer(), nullable=True),
        sa.Column('realtime_free_capacity_carsharing', sa.Integer(), nullable=True),
        sa.Column('realtime_free_capacity_truck', sa.Integer(), nullable=True),
        sa.Column('realtime_free_capacity_bus', sa.Integer(), nullable=True),
        sa.Column('opening_hours', sa.String(length=512), nullable=True),
        sa.Column('geometry', Point(), nullable=False),
        sa.ForeignKeyConstraint(['source_id'], ['source.id'], name=op.f('fk_parking_site_source_id')),
        sa.PrimaryKeyConstraint('id', name=op.f('pk_parking_site')),
    )
    with op.batch_alter_table('parking_site', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_parking_site_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_parking_site_modified_at'), ['modified_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_parking_site_original_uid'), ['original_uid'], unique=False)
        batch_op.create_index('ix_parking_site_source_original_uid', ['source_id', 'original_uid'], unique=True)
    # ### end Alembic commands ###
    engine_name = op.get_bind().engine.name
    if engine_name == 'postgresql':
        op.execute('CREATE INDEX ix_geometry_index ON parking_site USING GIST (geometry);')
    elif engine_name == 'mysql':
        op.execute('CREATE SPATIAL INDEX ix_geometry_index ON parking_site (geometry);')
    else:
        raise NotImplementedError('The application just supports mysql, mariadb and postgresql.')


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('parking_site', schema=None) as batch_op:
        batch_op.drop_index('ix_parking_site_source_original_uid')
        batch_op.drop_index(batch_op.f('ix_parking_site_original_uid'))
        batch_op.drop_index(batch_op.f('ix_parking_site_modified_at'))
        batch_op.drop_index(batch_op.f('ix_parking_site_created_at'))
        batch_op.drop_index(batch_op.f('ix_geometry_index'))

    op.drop_table('parking_site')
    with op.batch_alter_table('source', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_source_modified_at'))
        batch_op.drop_index(batch_op.f('ix_source_created_at'))

    op.drop_table('source')
    # ### end Alembic commands ###
